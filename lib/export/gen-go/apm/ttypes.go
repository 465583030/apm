// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package apm

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - SourcePath
//  - Name
//  - KeepAlive
//  - Args_
type GoBin struct {
	SourcePath string   `thrift:"SourcePath,1" db:"SourcePath" json:"SourcePath"`
	Name       string   `thrift:"Name,2" db:"Name" json:"Name"`
	KeepAlive  bool     `thrift:"KeepAlive,3" db:"KeepAlive" json:"KeepAlive"`
	Args_      []string `thrift:"Args,4" db:"Args" json:"Args"`
}

func NewGoBin() *GoBin {
	return &GoBin{}
}

func (p *GoBin) GetSourcePath() string {
	return p.SourcePath
}

func (p *GoBin) GetName() string {
	return p.Name
}

func (p *GoBin) GetKeepAlive() bool {
	return p.KeepAlive
}

func (p *GoBin) GetArgs_() []string {
	return p.Args_
}
func (p *GoBin) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GoBin) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SourcePath = v
	}
	return nil
}

func (p *GoBin) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *GoBin) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.KeepAlive = v
	}
	return nil
}

func (p *GoBin) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Args_ = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.Args_ = append(p.Args_, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GoBin) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GoBin"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GoBin) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SourcePath", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:SourcePath: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourcePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SourcePath (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:SourcePath: ", p), err)
	}
	return err
}

func (p *GoBin) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Name: ", p), err)
	}
	return err
}

func (p *GoBin) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("KeepAlive", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:KeepAlive: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.KeepAlive)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.KeepAlive (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:KeepAlive: ", p), err)
	}
	return err
}

func (p *GoBin) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Args", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Args: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Args_)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Args_ {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Args: ", p), err)
	}
	return err
}

func (p *GoBin) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GoBin(%+v)", *p)
}

// Attributes:
//  - Status
//  - Restarts
type ProcStatus struct {
	Status   string `thrift:"Status,1" db:"Status" json:"Status"`
	Restarts int32  `thrift:"Restarts,2" db:"Restarts" json:"Restarts"`
}

func NewProcStatus() *ProcStatus {
	return &ProcStatus{}
}

func (p *ProcStatus) GetStatus() string {
	return p.Status
}

func (p *ProcStatus) GetRestarts() int32 {
	return p.Restarts
}
func (p *ProcStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProcStatus) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *ProcStatus) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Restarts = v
	}
	return nil
}

func (p *ProcStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ProcStatus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProcStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Status", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Status: ", p), err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Status: ", p), err)
	}
	return err
}

func (p *ProcStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Restarts", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Restarts: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Restarts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Restarts (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Restarts: ", p), err)
	}
	return err
}

func (p *ProcStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProcStatus(%+v)", *p)
}

// Attributes:
//  - Name
//  - Cmd
//  - Args_
//  - Path
//  - Pidfile
//  - Outfile
//  - Errfile
//  - KeepAlive
//  - Pid
//  - Status
type Proc struct {
	Name      string      `thrift:"Name,1" db:"Name" json:"Name"`
	Cmd       string      `thrift:"Cmd,2" db:"Cmd" json:"Cmd"`
	Args_     []string    `thrift:"Args,3" db:"Args" json:"Args"`
	Path      string      `thrift:"Path,4" db:"Path" json:"Path"`
	Pidfile   string      `thrift:"Pidfile,5" db:"Pidfile" json:"Pidfile"`
	Outfile   string      `thrift:"Outfile,6" db:"Outfile" json:"Outfile"`
	Errfile   string      `thrift:"Errfile,7" db:"Errfile" json:"Errfile"`
	KeepAlive bool        `thrift:"KeepAlive,8" db:"KeepAlive" json:"KeepAlive"`
	Pid       int32       `thrift:"Pid,9" db:"Pid" json:"Pid"`
	Status    *ProcStatus `thrift:"Status,10" db:"Status" json:"Status"`
}

func NewProc() *Proc {
	return &Proc{}
}

func (p *Proc) GetName() string {
	return p.Name
}

func (p *Proc) GetCmd() string {
	return p.Cmd
}

func (p *Proc) GetArgs_() []string {
	return p.Args_
}

func (p *Proc) GetPath() string {
	return p.Path
}

func (p *Proc) GetPidfile() string {
	return p.Pidfile
}

func (p *Proc) GetOutfile() string {
	return p.Outfile
}

func (p *Proc) GetErrfile() string {
	return p.Errfile
}

func (p *Proc) GetKeepAlive() bool {
	return p.KeepAlive
}

func (p *Proc) GetPid() int32 {
	return p.Pid
}

var Proc_Status_DEFAULT *ProcStatus

func (p *Proc) GetStatus() *ProcStatus {
	if !p.IsSetStatus() {
		return Proc_Status_DEFAULT
	}
	return p.Status
}
func (p *Proc) IsSetStatus() bool {
	return p.Status != nil
}

func (p *Proc) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Proc) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Proc) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Cmd = v
	}
	return nil
}

func (p *Proc) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Args_ = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.Args_ = append(p.Args_, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Proc) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *Proc) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Pidfile = v
	}
	return nil
}

func (p *Proc) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Outfile = v
	}
	return nil
}

func (p *Proc) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Errfile = v
	}
	return nil
}

func (p *Proc) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.KeepAlive = v
	}
	return nil
}

func (p *Proc) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Pid = v
	}
	return nil
}

func (p *Proc) ReadField10(iprot thrift.TProtocol) error {
	p.Status = &ProcStatus{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *Proc) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Proc"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Proc) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Name: ", p), err)
	}
	return err
}

func (p *Proc) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Cmd", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Cmd: ", p), err)
	}
	if err := oprot.WriteString(string(p.Cmd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Cmd (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Cmd: ", p), err)
	}
	return err
}

func (p *Proc) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Args", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Args: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Args_)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Args_ {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Args: ", p), err)
	}
	return err
}

func (p *Proc) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Path", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Path (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Path: ", p), err)
	}
	return err
}

func (p *Proc) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Pidfile", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Pidfile: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pidfile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Pidfile (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Pidfile: ", p), err)
	}
	return err
}

func (p *Proc) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Outfile", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Outfile: ", p), err)
	}
	if err := oprot.WriteString(string(p.Outfile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Outfile (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Outfile: ", p), err)
	}
	return err
}

func (p *Proc) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Errfile", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Errfile: ", p), err)
	}
	if err := oprot.WriteString(string(p.Errfile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Errfile (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Errfile: ", p), err)
	}
	return err
}

func (p *Proc) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("KeepAlive", thrift.BOOL, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:KeepAlive: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.KeepAlive)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.KeepAlive (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:KeepAlive: ", p), err)
	}
	return err
}

func (p *Proc) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Pid", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:Pid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Pid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Pid (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:Pid: ", p), err)
	}
	return err
}

func (p *Proc) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Status", thrift.STRUCT, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Status: ", p), err)
	}
	return err
}

func (p *Proc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Proc(%+v)", *p)
}
